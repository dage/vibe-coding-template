# Vibe Coding Template - Cursor Rules for AI Agents

## Project Overview

**Vibe Coding Template** is an AI-assisted development workflow system that enables autonomous iteration loops for web application development. The core concept is to create a feedback loop where an AI agent continuously analyzes a running web application through screenshots and console logs, identifies UX/UI/logic issues, generates specific code improvements, and automatically applies those changes using Aider. This creates a "vibe coding" experience where developers can set the AI loose on their application and watch it iteratively improve the codebase while they focus on higher-level direction and review. The developer can "take over the steering wheel" at any time, do manual coding in Aider, and restart the autonomous AI agent iteration loop in any direction - creating a seamless hybrid workflow between human and AI development.

The system uses the best code generation and vision analysis models available at DeepInfra to provide a cost-effective alternative to traditional frontier models. The template includes a simple Vite-based test application, automated screenshot capture via Playwright, and integration with Aider for seamless code application.

## AI Agent Development Process

### New Development Workflow (July 30, 2025)

When implementing new features or changes to the template:

1. **Create Playground Project**: Use the updated `create_vibe_project.sh` script to create a new playground:
   ```bash
   ./create_vibe_project.sh 1  # Creates vibe_ai_playground_1
   # or
   ./create_vibe_project.sh    # Interactive mode
   ```

2. **Test in Playground**: Work in the playground directory (`../vibe_ai_playground_X/`) to:
   - Implement and test new features
   - Iterate on changes until they work correctly
   - Verify functionality with actual testing
   - Ensure changes are minimal and high-quality

3. **Apply to Template**: Once tested and working in the playground:
   - Make minimal, targeted changes to the main template
   - Apply only the proven, tested changes
   - Avoid over-engineering or complex solutions
   - Maintain high confidence that changes will work

4. **Document Process**: Update this file and `PROJECT_HISTORY_LESSONS.md` with the new approach

## Third-Party Software Installation Guidelines

### Critical Rule: Always Use Official Installation Instructions

When installing any third-party software (especially Aider):

1. **Search for Official Documentation**: Always search online for the latest official installation instructions
2. **Follow Official Methods**: Use the recommended installation methods from official sources
3. **Avoid Package Manager Assumptions**: Don't assume pip/conda packages are the correct way to install
4. **Check for Breaking Changes**: Verify if the software has changed installation methods recently

### Aider Installation Reference

**Official Aider Installation**: https://aider.chat/docs/install.html

**Recommended Installation Method**:
```bash
# Install aider-install first
python -m pip install aider-install
aider-install

# Or use the one-liner
curl -LsSf https://aider.chat/install.sh | sh
```

**Important**: Aider installation requires restarting the shell/terminal after installation.

## Critical Project History Lessons

**DO NOT REPEAT THESE MISTAKES:**

1. **NEVER isolate the test-app from git tracking** - This was done in commit `6e8ae5986a2103948db18637c1c5a8398856218c` and caused complete loss of version control for the actual application being developed. Always keep the test-app under version control in the main repository.

2. **AVOID over-engineering workflows** - The project became complex with multiple workflow scripts (`start_vibe_coding.sh`, `continue_vibe_coding.sh`, `vibe_common.sh`) that added complexity without clear benefits. Keep workflows simple and focused.

3. **DON'T add complex features without clear need** - The Mandelbrot set implementation (commit `73c89a03a0031ddf2f40001ebe97bd2d41c9ea96`) may have introduced performance issues and was unnecessary for the core functionality.

4. **AVOID inconsistent AI tool integration** - Multiple attempts to fix Aider integration created unreliable AI-assisted development workflows.

5. **NEVER install third-party software without checking official instructions** - The aider installation fiasco showed that using outdated package names and versions leads to broken systems. Always follow official installation guides.

## Development Guidelines

### Core Principles

1. **Simplicity First** - Always prefer simple solutions over complex ones
2. **Version Control Everything** - Never remove files from git tracking without clear justification
3. **Incremental Changes** - Make small, testable changes and verify functionality after each change
4. **Focus on Core Functionality** - The main goal is AI-assisted coding workflows, not complex visualizations
5. **Always Activate Conda Environment** - Before running any Python scripts, ensure the "vibes" conda environment is activated: `conda activate vibes`
6. **No Automatic Commits** - Never automatically commit changes. Always let the user review and commit manually
7. **Follow Official Installation Guides** - Always search for and follow the latest official installation instructions for third-party software

### File Structure to Maintain

```
vibe_coding_template/
├── playloop.py (core AI loop - keep simple)
├── demo_vibe_loop.py (demo functionality)
├── test_setup.py (environment testing)
├── create_vibe_project.sh (project creation helper)
├── test-app/ (simple Vite app - MUST stay in git)
├── run_demo.sh (demo runner)
├── vibe_coding.sh (main vibe coding workflow)
├── requirements.txt (Python dependencies)
├── .cursorrules (AI agent guidelines)
├── PROJECT_HISTORY_LESSONS.md (development history)
└── README.md (documentation)
```

### What to Avoid

1. **Complex git isolation** - Don't create separate git repos for test-app
2. **Over-engineered workflows** - Don't create multiple complex workflow scripts
3. **Unnecessary features** - Don't add complex visualizations or features without clear need
4. **Breaking changes** - Don't make changes that break the core AI loop functionality
5. **Outdated installation methods** - Don't use old package names or installation methods without verifying current official instructions

### Testing Requirements

1. **NEVER run scripts in the template folder** - The template folder is for development only, not testing
2. **Template integrity** - The template must remain clean and functional for all users
3. **Test in playground projects** - Use `create_vibe_project.sh` to create test projects, then test there
4. **Always activate conda environment** - Run `conda activate vibes` before testing any Python scripts (in playground projects only)
5. **File integrity awareness** - Files can get corrupted during development (e.g., vibe_common.sh containing only '%'). Always verify file contents after making changes.
6. **Avoid over-engineering fixes** - When fixing simple issues (like port conflicts), avoid complex solutions. Prefer simple approaches over complex port management or timeout handling.
7. **Verify third-party installations** - After installing third-party software, verify it works correctly before proceeding

### When Making Changes

1. **Start with the working state** - Use commit `6f170e40a4d8cf1e4bd2d422d3ecd24e655fba08` as reference
2. **Make one change at a time** - Don't make multiple unrelated changes
3. **NEVER test in template** - Template is for development only, not testing
4. **Document changes** - Update README.md and other documentation
5. **Keep it simple** - If a change makes things more complex, reconsider it
6. **Let user review and test** - Never commit automatically. Always let the user review and test changes in project instances

### Emergency Recovery

If the project becomes broken again:
1. Revert to commit `6f170e40a4d8cf1e4bd2d422d3ecd24e655fba08`
2. Remove all complex workflow scripts
3. Ensure test-app is back under git tracking
4. Simplify playloop.py to basic functionality
5. Test core functionality before making any new changes

## Specific File Guidelines

### playloop.py
- Keep it simple and focused on AI loop functionality
- Don't add complex error handling that makes it hard to debug
- Maintain the core autonomous iteration capability

### test-app/
- MUST remain under git tracking
- Keep it simple - basic Vite app is sufficient
- Don't add complex visualizations unless absolutely necessary

### Workflow Scripts
- Prefer simple shell scripts over complex Python scripts
- Don't create multiple workflow scripts - keep it minimal
- Focus on core functionality: setup, run, demo

### Documentation
- Keep README.md clear and up-to-date
- Don't create multiple documentation files unless necessary
- Focus on getting new developers up and running quickly

Remember: This project is about AI-assisted coding workflows, not about creating the most complex or feature-rich system. Keep it simple, focused, and working. 